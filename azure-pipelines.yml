variables:
- group: yonchee-var-group

trigger:
  branches:
    include:
      - dev
      - main

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.10'
          addToPath: true
        displayName: 'Use Python 3.10'

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - script: |
          zip -r $(Build.ArtifactStagingDirectory)/release.zip . -x \
            ".git/*" \
            ".github/*" \
            ".gitignore" \
            "azure-pipelines.yml" \
            "README.md"
        displayName: 'Create archive with included files'

      - publish: $(Build.ArtifactStagingDirectory)/release.zip
        displayName: 'Publish Artifact'
        artifact: python-app

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - job: DeployStaging
    displayName: 'Deploy to Staging'
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - download: current
        artifact: python-app
        displayName: 'Download Yonchee artifact'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.10'
          addToPath: true
        displayName: 'Use Python 3.10'

      - script: |
          echo "Checking the contents of the directory before unzipping..."
          ls -l $(Pipeline.Workspace)/python-app/
          echo "Unzipping the artifact..."
          unzip -o -d $(Pipeline.Workspace)/python-app $(Pipeline.Workspace)/python-app/release.zip
          echo "Contents after unzip:"
          ls -l $(Pipeline.Workspace)/python-app/
        displayName: 'Unzip artifact for deployment'
        timeoutInMinutes: 10  # Increase the timeout if necessary

      - script: |
          echo "Checking the presence of requirements.txt"
          if [ -f $(Pipeline.Workspace)/python-app/requirements.txt ]; then
            echo "requirements.txt found, installing dependencies..."
            pip install -r $(Pipeline.Workspace)/python-app/requirements.txt
          else
            echo "requirements.txt not found"
            exit 1
          fi
        displayName: 'Install dependencies in target environment'
        workingDirectory: $(Pipeline.Workspace)/python-app  # Double-check directory context

      - task: AzureCLI@2
        displayName: 'Delete WEBSITE_RUN_FROM_PACKAGE'
        inputs:
          azureSubscription: 'yonchee-service-connection'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az webapp config appsettings delete \
              --name yonchee-staging \
              --resource-group yonchee_rg \
              --setting-names WEBSITE_RUN_FROM_PACKAGE

      - task: AzureCLI@2
        displayName: 'Configure variables'
        inputs:
          azureSubscription: 'yonchee-service-connection'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az webapp config appsettings set \
              --name yonchee-staging \
              --resource-group yonchee_rg \
              --settings OCR_API_KEY=$(OCR_API_KEY) 
                         AZURE_SPEECH_KEY=$(AZURE_SPEECH_KEY) \
                         AZURE_SERVICE_REGION=$(AZURE_SERVICE_REGION) \
                         DOCUMENT_INTELLIGENCE_KEY=$(DOCUMENT_INTELLIGENCE_KEY) \
                         DOCUMENT_INTELLIGENCE_ENDPOINT=$(DOCUMENT_INTELLIGENCE_ENDPOINT)

      - task: AzureWebApp@1
        displayName: 'Deploy Yonchee Staging app'
        inputs:
          azureSubscription: 'yonchee-service-connection'
          appName: 'yonchee-staging'
          package: '$(Pipeline.Workspace)/python-app/release.zip'
          startupCommand: 'waitress-serve --port=8000 app:app'
          appType: 'webAppLinux'

  - job: DeployProduction
    displayName: 'Deploy to Production'
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - download: current
        artifact: python-app
        displayName: 'Download Yonchee artifact'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.10'
          addToPath: true
        displayName: 'Use Python 3.10'

      - script: |
          echo "Checking the contents of the directory before unzipping..."
          ls -l $(Pipeline.Workspace)/python-app/
          echo "Unzipping the artifact..."
          unzip -o -d $(Pipeline.Workspace)/python-app $(Pipeline.Workspace)/python-app/release.zip
          echo "Contents after unzip:"
          ls -l $(Pipeline.Workspace)/python-app/
        displayName: 'Unzip artifact for deployment'
        timeoutInMinutes: 10  # Increase the timeout if necessary

      - script: |
          echo "Checking the presence of requirements.txt"
          if [ -f $(Pipeline.Workspace)/python-app/requirements.txt ]; then
            echo "requirements.txt found, installing dependencies..."
            pip install -r $(Pipeline.Workspace)/python-app/requirements.txt
          else
            echo "requirements.txt not found"
            exit 1
          fi
        displayName: 'Install dependencies in target environment'
        workingDirectory: $(Pipeline.Workspace)/python-app  # Double-check directory context

      - task: AzureCLI@2
        displayName: 'Delete WEBSITE_RUN_FROM_PACKAGE'
        inputs:
          azureSubscription: 'yonchee-service-connection'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az webapp config appsettings delete \
              --name yonchee \
              --resource-group yonchee_rg \
              --setting-names WEBSITE_RUN_FROM_PACKAGE

      - task: AzureCLI@2
        displayName: 'Configure variables'
        inputs:
          azureSubscription: 'yonchee-service-connection'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az webapp config appsettings set \
              --name yonchee \
              --resource-group yonchee_rg \
              --settings OCR_API_KEY=$(OCR_API_KEY) 
                         AZURE_SPEECH_KEY=$(AZURE_SPEECH_KEY) \
                         AZURE_SERVICE_REGION=$(AZURE_SERVICE_REGION) \
                         DOCUMENT_INTELLIGENCE_KEY=$(DOCUMENT_INTELLIGENCE_KEY) \
                         DOCUMENT_INTELLIGENCE_ENDPOINT=$(DOCUMENT_INTELLIGENCE_ENDPOINT)

      - task: AzureWebApp@1
        displayName: 'Deploy Yonchee Production app'
        inputs:
          azureSubscription: 'yonchee-service-connection'
          appName: 'yonchee'
          package: '$(Pipeline.Workspace)/python-app/release.zip'
          startupCommand: 'waitress-serve --port=8000 app:app'
          appType: 'webAppLinux'